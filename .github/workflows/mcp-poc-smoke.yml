name: MCP POC Smoke Test

on:
  pull_request:
    branches: 
      - main
      - develop
      - 'feature/mcp/**'
    paths:
      - 'Source/ChatGPTEditor/Public/MCP/**'
      - 'Source/ChatGPTEditor/Private/MCP/**'
      - 'Source/ChatGPTEditor/Private/Tests/SMCPSmokeTest.cpp'
      - 'tools/mcp/**'
      - '.github/workflows/mcp-poc-smoke.yml'
  push:
    branches:
      - 'feature/mcp/**'
  workflow_dispatch:

jobs:
  smoke-test:
    name: Run MCP Smoke Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Environment
      run: |
        echo "CI=true" >> $GITHUB_ENV
        echo "MCP_TEST_MODE=smoke" >> $GITHUB_ENV
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq python3
    
    - name: Verify Repository Structure
      run: |
        echo "Verifying MCP implementation files..."
        ls -la Source/ChatGPTEditor/Public/MCP/
        ls -la Source/ChatGPTEditor/Private/MCP/
        echo "MCP files verified"
    
    - name: Run Smoke Test Script
      id: smoke_test
      run: |
        chmod +x tools/mcp/smoke_test.sh
        ./tools/mcp/smoke_test.sh
      continue-on-error: false
    
    - name: Check Test Results
      if: always()
      run: |
        echo "Checking test results..."
        if [ -d "logs" ]; then
          echo "Test logs found:"
          ls -la logs/
          
          # Display summary from latest log
          LATEST_LOG=$(ls -t logs/mcp_smoke_test_*.log | head -n 1)
          if [ -f "$LATEST_LOG" ]; then
            echo "=== Test Summary ==="
            tail -n 20 "$LATEST_LOG"
          fi
        else
          echo "Warning: logs directory not found"
        fi
    
    - name: Upload Test Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: mcp-smoke-test-logs
        path: |
          logs/
          !logs/.gitkeep
        retention-days: 7
        if-no-files-found: warn
    
    - name: Upload JSON Request Files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: mcp-json-requests
        path: |
          logs/*.json
        retention-days: 3
        if-no-files-found: warn
    
    - name: Report Status
      if: always()
      run: |
        if [ "${{ steps.smoke_test.outcome }}" == "success" ]; then
          echo "✓ MCP smoke tests PASSED"
          exit 0
        else
          echo "✗ MCP smoke tests FAILED"
          echo "Review the uploaded artifacts for detailed logs"
          exit 1
        fi

  validate-documentation:
    name: Validate MCP Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Verify Runbook Exists
      run: |
        if [ ! -f "docs/MCP_POC_RUNBOOK.md" ]; then
          echo "Error: MCP_POC_RUNBOOK.md not found"
          exit 1
        fi
        echo "✓ MCP POC Runbook exists"
    
    - name: Check Runbook Content
      run: |
        echo "Checking runbook content..."
        
        # Check for required sections
        REQUIRED_SECTIONS=(
          "Prerequisites"
          "Building the Plugin"
          "Running the MCP Server"
          "Smoke Testing"
          "Troubleshooting"
        )
        
        for section in "${REQUIRED_SECTIONS[@]}"; do
          if grep -q "$section" docs/MCP_POC_RUNBOOK.md; then
            echo "✓ Found section: $section"
          else
            echo "✗ Missing section: $section"
            exit 1
          fi
        done
        
        echo "✓ All required sections present"
    
    - name: Verify Smoke Test Scripts Exist
      run: |
        if [ ! -f "tools/mcp/smoke_test.sh" ]; then
          echo "Error: smoke_test.sh not found"
          exit 1
        fi
        
        if [ ! -f "tools/mcp/smoke_test.ps1" ]; then
          echo "Error: smoke_test.ps1 not found"
          exit 1
        fi
        
        # Check if bash script is executable
        if [ ! -x "tools/mcp/smoke_test.sh" ]; then
          echo "Warning: smoke_test.sh is not executable"
        fi
        
        echo "✓ Smoke test scripts exist"
    
    - name: Verify Test Implementation
      run: |
        if [ ! -f "Source/ChatGPTEditor/Private/Tests/SMCPSmokeTest.cpp" ]; then
          echo "Error: SMCPSmokeTest.cpp not found"
          exit 1
        fi
        
        echo "✓ C++ smoke test implementation exists"
    
    - name: Check MCP Implementation Checklist
      run: |
        if [ ! -f "MCP_IMPLEMENTATION_CHECKLIST.MD" ]; then
          echo "Error: MCP_IMPLEMENTATION_CHECKLIST.MD not found"
          exit 1
        fi
        
        echo "✓ MCP Implementation Checklist exists"

  code-quality:
    name: MCP Code Quality Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Check for Debug Code
      run: |
        echo "Checking for debug artifacts in MCP code..."
        
        # Check for common debug statements
        if grep -r "printf\|cout\|UE_LOG.*Verbose" Source/ChatGPTEditor/Private/MCP/ Source/ChatGPTEditor/Public/MCP/ | grep -v "//"; then
          echo "Warning: Found debug statements in MCP code (this is OK for POC)"
        fi
        
        echo "✓ Code quality check completed"
    
    - name: Verify File Structure
      run: |
        echo "Verifying MCP file structure..."
        
        # Check that header files are in Public and implementation in Private
        PUBLIC_FILES=$(find Source/ChatGPTEditor/Public/MCP -name "*.h" | wc -l)
        PRIVATE_FILES=$(find Source/ChatGPTEditor/Private/MCP -name "*.cpp" | wc -l)
        
        echo "Public header files: $PUBLIC_FILES"
        echo "Private implementation files: $PRIVATE_FILES"
        
        if [ $PUBLIC_FILES -eq 0 ]; then
          echo "Error: No public header files found"
          exit 1
        fi
        
        echo "✓ File structure looks good"
